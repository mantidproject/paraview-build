diff --git a/IO/XML/vtkXMLStructuredDataWriter.cxx b/IO/XML/vtkXMLStructuredDataWriter.cxx
index 0e2626d..ded80b0 100644
--- a/IO/XML/vtkXMLStructuredDataWriter.cxx
+++ b/IO/XML/vtkXMLStructuredDataWriter.cxx
@@ -94,6 +94,26 @@ void vtkXMLStructuredDataWriter::SetInputUpdateExtent(int piece)
   inInfo->Set(vtkStreamingDemandDrivenPipeline::EXACT_EXTENT(), 1);
 }
 
+vtkIdType vtkXMLStructuredDataWriter::GetNumberOfValues(vtkDataSet* input)
+{
+  vtkIdType dataSetValues = 0;
+  vtkPointData *pointData = input->GetPointData();
+  int pdArrays = pointData->GetNumberOfArrays();
+  for (int i = 0; i < pdArrays; ++i)
+  {
+    vtkAbstractArray *array = pointData->GetAbstractArray(i);
+    dataSetValues += array->GetNumberOfValues();
+  }
+  vtkCellData *cellData = input->GetCellData();
+  int cdArrays = cellData->GetNumberOfArrays();
+  for (int i = 0; i < cdArrays; ++i)
+  {
+    vtkAbstractArray * array = cellData->GetAbstractArray(i);
+    dataSetValues += array->GetNumberOfValues();
+  }
+  return dataSetValues;
+}
+
 //----------------------------------------------------------------------------
 int vtkXMLStructuredDataWriter::ProcessRequest(
   vtkInformation* request,
@@ -134,11 +154,23 @@ int vtkXMLStructuredDataWriter::ProcessRequest(
     // UpdateProgressDiscrete because we want a 0 progress callback the
     // first time.
     this->UpdateProgress(0);
-
+    this->SetProgressText("vtkXMLStructuredDataWriter");
     // Initialize progress range to entire 0..1 range.
-    float wholeProgressRange[2] = {0,1};
-    this->SetProgressRange(wholeProgressRange, 0, 1);
-
+    float wholeProgressRange[] = {0.0f, 1.0f};
+    vtkIdType FieldDataValues = 0;
+    vtkFieldData *fieldData = this->GetInput()->GetFieldData();
+    for (int i = 0; i < fieldData->GetNumberOfArrays(); ++i)
+    {
+      vtkAbstractArray *array = fieldData->GetAbstractArray(i);
+      FieldDataValues += array->GetNumberOfValues();
+    }
+    vtkIdType DataSetValues = FieldDataValues + GetNumberOfValues(this->GetInputAsDataSet());
+    if (DataSetValues == 0)
+    {
+      DataSetValues = 1;
+    }
+    float fraction[] = {0.0f, static_cast<float>(FieldDataValues)/DataSetValues, 1.0f};
+    this->SetProgressRange(wholeProgressRange, 0, fraction);
     int result = 1;
     if ((this->CurrentPiece == 0 || this->WritePiece >= 0) && this->CurrentTimeIndex == 0 )
     {
@@ -180,6 +212,7 @@ int vtkXMLStructuredDataWriter::ProcessRequest(
 
     if (!(this->UserContinueExecuting == 0)) //if user ask to stop do not try to write a piece
     {
+      this->SetProgressRange(wholeProgressRange, 1, fraction);
       result = this->WriteAPiece();
     }
 
diff --git a/IO/XML/vtkXMLStructuredDataWriter.h b/IO/XML/vtkXMLStructuredDataWriter.h
index 6b2499b..482733e 100644
--- a/IO/XML/vtkXMLStructuredDataWriter.h
+++ b/IO/XML/vtkXMLStructuredDataWriter.h
@@ -102,6 +102,8 @@ protected:
 
   vtkSetVector6Macro(InternalWriteExtent, int);
 
+  static vtkIdType GetNumberOfValues(vtkDataSet* input);
+
   // The extent of the input to write, as specified by user
   int WriteExtent[6];
 
diff --git a/IO/XML/vtkXMLStructuredGridWriter.cxx b/IO/XML/vtkXMLStructuredGridWriter.cxx
index c4eb962..f3814d8 100644
--- a/IO/XML/vtkXMLStructuredGridWriter.cxx
+++ b/IO/XML/vtkXMLStructuredGridWriter.cxx
@@ -153,28 +153,18 @@ void vtkXMLStructuredGridWriter::WriteInlinePiece(vtkIndent indent)
 //----------------------------------------------------------------------------
 void vtkXMLStructuredGridWriter::CalculateSuperclassFraction(float* fractions)
 {
-  int extent[6];
-  this->GetInputExtent(extent);
-  int dims[3] = {extent[1]-extent[0],
-                 extent[3]-extent[2],
-                 extent[5]-extent[4]};
-
   // The amount of data written by the superclass comes from the
   // point/cell data arrays.
-  vtkIdType superclassPieceSize =
-    (this->GetInput()->GetPointData()->GetNumberOfArrays()*dims[0]*dims[1]*dims[2]+
-     this->GetInput()->GetCellData()->GetNumberOfArrays()*(dims[0]-1)*(dims[1]-1)*(dims[2]-1));
-
+  vtkIdType superclassPieceSize = GetNumberOfValues(this->GetInput());
   // The total data written includes the points array.
-  vtkIdType totalPieceSize =
-    superclassPieceSize + (dims[0] * dims[1] * dims[2]);
+  vtkIdType totalPieceSize = superclassPieceSize + this->GetInput()->GetNumberOfPoints()*3;
   if (totalPieceSize == 0)
   {
     totalPieceSize = 1;
   }
-  fractions[0] = 0;
-  fractions[1] = fractions[0] + float(superclassPieceSize)/totalPieceSize;
-  fractions[2] = 1;
+  fractions[0] = 0.0f;
+  fractions[1] = static_cast<float>(superclassPieceSize)/totalPieceSize;
+  fractions[2] = 1.0f;
 }
 
 //----------------------------------------------------------------------------
