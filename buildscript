#!/bin/bash -ex
##############################################################################
# Script for doing a ParaView source build on Linux/OSX
#
# BUILD_THREADS is set in the Jenkins node configuration
# NODE_LABELS should be set to indicate the OS
#
# It should be invoked as
#   - buildscript [<build-dir>]
# where <build-dir> is an optional build directory (default=$HOME/build)
#
# This will create a directory for the PARAVIEW_DIR configuration
# variable like:
#
# OSX:   /Users/builder/<build-dir>/ParaView-X.Y.Z
# Linux: /home/builder/<build-dir>/ParaView-X.Y.Z
##############################################################################

#get script directory
SCRIPT_DIR=$( cd "$(dirname "${BASH_SOURCE[0]}" )" && pwd)

# Set the ParaView version to build
PV_VERSION=v5.3.0
PV_VERSION2=${PV_VERSION%.*}
PV_VERSION3=${PV_VERSION/v/}

# Set the source and build directories
BUILDER=builder

if [[ $(uname) == "Darwin" ]]; then
  ON_OSX=true
  HOME_DIR=/Users/${BUILDER}
  OSX_VERSION=$(sw_vers -productVersion | head -n1 | awk '{print $3}')
  echo "Using OS X version ${OSX_VERSION}"
  OSX_MAJOR_VERSION=$(echo $OSX_VERSION | cut -d. -f1)
  OSX_MINOR_VERSION=$(echo $OSX_VERSION | cut -d. -f2)
  OSX_PATCH_VERSION=$(echo $OSX_VERSION | cut -d. -f3)
else
  HOME_DIR=/home/${BUILDER}
fi

SRC_DIR=${HOME_DIR}/src
if [ $# -eq "1" ]; then
  BUILD_DIR=$1
else
  BUILD_DIR=${HOME_DIR}/build
fi

# Parse cmake version
CMAKE_VERSION=$(cmake --version | head -n1 | awk '{print $3}')
echo "Using cmake version ${CMAKE_VERSION}"
CMAKE_MAJOR_VERSION=$(echo $CMAKE_VERSION | cut -d. -f1)
CMAKE_MINOR_VERSION=$(echo $CMAKE_VERSION | cut -d. -f2)
CMAKE_PATCH_VERSION=$(echo $CMAKE_VERSION | cut -d. -f3)

# Setup directories if they don't exist.
[[ -d ${SRC_DIR} ]] || mkdir -p ${SRC_DIR}
[[ -d ${BUILD_DIR} ]] || mkdir -p ${BUILD_DIR}

# Grab source package and unpack
cd ${SRC_DIR}
PARAVIEW_SRC=ParaView-${PV_VERSION}-source
if [[ ! -d ${PARAVIEW_SRC} ]]; then
 git clone https://gitlab.kitware.com/paraview/paraview.git ${PARAVIEW_SRC}
 cd ${PARAVIEW_SRC}
else
 cd ${PARAVIEW_SRC}
 # Update paraview branches && tags
 # Tags need to be separate as git < 1.9 fetches only tags with -t
 git fetch -p
 git fetch -t
 # RHEL6 has git 1.7 that doesn't know about submodule recursion
 git submodule foreach git fetch -p
 git submodule foreach git fetch -t
fi
git checkout ${PV_VERSION}
git submodule update --init --recursive
#remove any changes from previous patches
git reset --hard
git submodule foreach git reset --hard
git clean -xf
git submodule foreach git clean -xf
git config user.name "Bob T. Builder"
git config user.email "builder@ornl.gov"
git apply ${SCRIPT_DIR}/patches/1211.diff
git apply ${SCRIPT_DIR}/patches/1382.diff
git apply ${SCRIPT_DIR}/patches/1406.diff
cd VTK
git config user.name "Bob T. Builder"
git config user.email "builder@ornl.gov"
git apply ${SCRIPT_DIR}/patches/2527.diff
git cherry-pick c006b84315b7913c7ad4fbefd35b769c4ca4785d

# Go to build area, setup and run
cd ${BUILD_DIR}
PARAVIEW_BUILD=ParaView-${PV_VERSION3}

###############################################################################
# Check if this is a Python 3 build
###############################################################################
if [[ ${JOB_NAME} == *python3* ]]; then
    PY3=true
    PARAVIEW_BUILD="${PARAVIEW_BUILD}-python3"
fi

if [[ "$CLEAN" == true ]]; then
  echo "Clean build requested. Removing '$PARAVIEW_BUILD'"
  rm -rf $PARAVIEW_BUILD
fi
[[ -d ${PARAVIEW_BUILD} ]] || mkdir ${PARAVIEW_BUILD}
cd ${PARAVIEW_BUILD}

COMMON_CACHE_FILE=${SCRIPT_DIR}/common.cmake
OSX_CACHE_FILE=${SCRIPT_DIR}/osx.cmake
if [[ "${PY3}" == true ]]; then
  OSX_PYTHON_CACHE_FILE=${SCRIPT_DIR}/osxpython3.cmake
else
  OSX_PYTHON_CACHE_FILE=${SCRIPT_DIR}/osxpython.cmake
fi
LINUX_CACHE_FILE=${SCRIPT_DIR}/linux.cmake
PYTHON3_CACHE_FILE=${SCRIPT_DIR}/python3.cmake

[[ -d vtkMDHWSignalArray ]] || mkdir vtkMDHWSignalArray
cp ${SCRIPT_DIR}/vtkMDHWSignalArray/vtkMDHWSignalArray.h vtkMDHWSignalArray
SIGNAL_NAME=vtkArrayDispatch_extra_arrays=vtkMDHWSignalArray\\\<double\\\>
SIGNAL_HEADER=vtkArrayDispatch_extra_headers=${BUILD_DIR}/${PARAVIEW_BUILD}/vtkMDHWSignalArray/vtkMDHWSignalArray.h

if [[ ${NODE_LABELS} == *rhel6* ]]; then
  SCL_ON_RHEL6="scl enable mantidlibs34 devtoolset-2"
else
  SCL_ON_RHEL6="eval"
fi

if [[ "${ON_OSX}" == true ]]; then
  if [[ "${PY3}" == true ]]; then
    $SCL_ON_RHEL6 "cmake -D${SIGNAL_NAME} -D${SIGNAL_HEADER} -C${COMMON_CACHE_FILE} -C${OSX_CACHE_FILE} -C ${OSX_PYTHON_CACHE_FILE} ${SRC_DIR}/${PARAVIEW_SRC}"
  else
    if [[ "$OSX_MINOR_VERSON" -gt "10" ]]; then
      $SCL_ON_RHEL6 "cmake -D${SIGNAL_NAME} -D${SIGNAL_HEADER} -C${COMMON_CACHE_FILE} -C${OSX_CACHE_FILE} -C ${OSX_PYTHON_CACHE_FILE} ${SRC_DIR}/${PARAVIEW_SRC}"
    else
      $SCL_ON_RHEL6 "cmake -D${SIGNAL_NAME} -D${SIGNAL_HEADER} -C${COMMON_CACHE_FILE} -C${OSX_CACHE_FILE} ${SRC_DIR}/${PARAVIEW_SRC}"
    fi
  fi
else
    if [[ "${PY3}" == true ]]; then
	$SCL_ON_RHEL6 "cmake -D${SIGNAL_NAME} -D${SIGNAL_HEADER} -C${COMMON_CACHE_FILE} -C${LINUX_CACHE_FILE} -C${PYTHON3_CACHE_FILE} ${SRC_DIR}/${PARAVIEW_SRC}"
    else
	$SCL_ON_RHEL6 "cmake -D${SIGNAL_NAME} -D${SIGNAL_HEADER} -C${COMMON_CACHE_FILE} -C${LINUX_CACHE_FILE} ${SRC_DIR}/${PARAVIEW_SRC}"
    fi
fi

$SCL_ON_RHEL6 "make -j ${BUILD_THREADS}"
