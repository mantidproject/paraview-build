#!/bin/bash -ex
##############################################################################
# Script for doing a ParaView source build on Linux/OSX
#
# BUILD_THREADS is set in the Jenkins node configuration
# NODE_LABELS should be set to indicate the OS
#
# It should be invoked as
#   - buildscript [<build-dir>]
# where <build-dir> is an optional build directory (default=$HOME/build)
#
# This will create a directory for the PARAVIEW_DIR configuration
# variable like:
#
# OSX:   /Users/builder/<build-dir>/ParaView-X.Y.Z
# Linux: /home/builder/<build-dir>/ParaView-X.Y.Z
##############################################################################

#get script directory
SCRIPT_DIR=$( cd "$(dirname "${BASH_SOURCE[0]}" )" && pwd)

# Set the ParaView version to build
PV_VERSION=v5.4.1
PV_VERSION2=${PV_VERSION%.*}
PV_VERSION3=${PV_VERSION/v/}

# Set the source and build directories
BUILDER=builder

if [[ ${NODE_LABELS} == *osx* ]]; then
  ON_OSX=true
  HOME_DIR=/Users/${BUILDER}
  OSX_VERSION=$(sw_vers -productVersion)
  echo "Using OS X version ${OSX_VERSION}"
  OSX_MAJOR_VERSION=$(echo $OSX_VERSION | cut -d. -f1)
  OSX_MINOR_VERSION=$(echo $OSX_VERSION | cut -d. -f2)
  OSX_PATCH_VERSION=$(echo $OSX_VERSION | cut -d. -f3)
else
  HOME_DIR=/home/${BUILDER}
fi
if [[ ${NODE_LABELS} == *rhel7* ]] || [[ ${NODE_LABELS} == *centos7* ]] || [[ ${NODE_LABELS} == *scilin7* ]]; then
  ON_RHEL7=true
fi

SRC_DIR=${HOME_DIR}/src
if [ $# -eq "1" ]; then
  BUILD_DIR=$1
else
  BUILD_DIR=${HOME_DIR}/build
fi

# Parse cmake version - we use cmake3 on rhel because cmake is too old
if [ $(command -v cmake3) ]; then
    CMAKE_EXE=cmake3
else
    CMAKE_EXE=cmake
fi
CMAKE_VERSION=$(${CMAKE_EXE} --version | head -n1 | awk '{print $3}')
echo "Using cmake version ${CMAKE_VERSION}"
CMAKE_MAJOR_VERSION=$(echo $CMAKE_VERSION | cut -d. -f1)
CMAKE_MINOR_VERSION=$(echo $CMAKE_VERSION | cut -d. -f2)
CMAKE_PATCH_VERSION=$(echo $CMAKE_VERSION | cut -d. -f3)

# Setup directories if they don't exist.
[[ -d ${SRC_DIR} ]] || mkdir -p ${SRC_DIR}
[[ -d ${BUILD_DIR} ]] || mkdir -p ${BUILD_DIR}

# Grab source package and unpack
cd ${SRC_DIR}
PARAVIEW_SRC=ParaView-${PV_VERSION}-source
if [[ ! -d ${PARAVIEW_SRC} ]]; then
 git clone --branch ${PV_VERSION} https://gitlab.kitware.com/paraview/paraview.git ${PARAVIEW_SRC}
 cd ${PARAVIEW_SRC}
else
 cd ${PARAVIEW_SRC}
 # Update paraview branches && tags
 # Tags need to be separate as git < 1.9 fetches only tags with -t
 git fetch -p
 git fetch -t
 # RHEL6 has git 1.7 that doesn't know about submodule recursion
 git submodule foreach git fetch -p
 git submodule foreach git fetch -t
fi

# Determine the version of JsonCpp we have
JSONCPP_VERSION_H=`find /usr/include/ /usr/local/include/ -path "*/json*" -name "version.h"`
if [ -e ${JSONCPP_VERSION_H} ]; then
  JSONCPP_VERSION_MAJOR=`cat ${JSONCPP_VERSION_H} | sed -n "s/.*JSONCPP_VERSION_MAJOR[ tab]*\([0-9]\)/\1/p"`
  JSONCPP_VERSION_MINOR=`cat ${JSONCPP_VERSION_H} | sed -n "s/.*JSONCPP_VERSION_MINOR[ tab]*\([0-9]\)/\1/p"`
  JSONCPP_VERSION_PATCH=`cat ${JSONCPP_VERSION_H} | sed -n "s/.*JSONCPP_VERSION_PATCH[ tab]*\([0-9]\)/\1/p"`
  JSONCPP_VERSION_MAJOR=`printf "%03d" ${JSONCPP_VERSION_MAJOR}`
  JSONCPP_VERSION_MINOR=`printf "%03d" ${JSONCPP_VERSION_MINOR}`
  JSONCPP_VERSION_PATCH=`printf "%03d" ${JSONCPP_VERSION_PATCH}`
  JSONCPP_VERSION=${JSONCPP_VERSION_MAJOR}${JSONCPP_VERSION_MINOR}${JSONCPP_VERSION_PATCH}
  echo "Found JsonCpp version ${JSONCPP_VERSION} from ${JSONCPP_VERSION_H}"
fi

#remove any changes from previous patches
git reset --hard ${PV_VERSION}
git submodule foreach git reset --hard
git clean -xf
git submodule foreach git clean -xf
git checkout ${PV_VERSION}
git submodule update --init --recursive
git config user.name "Bob T. Builder"
git config user.email "builder@ornl.gov"
git apply ${SCRIPT_DIR}/patches/1565.diff
git apply ${SCRIPT_DIR}/patches/1850.diff
git apply ${SCRIPT_DIR}/patches/1866.diff
git apply ${SCRIPT_DIR}/patches/1882.diff
git apply ${SCRIPT_DIR}/patches/remove-vtkguisupportqt-dep.diff
if [ -e ${JSONCPP_VERSION_H} ] && (( ${JSONCPP_VERSION} < 001007004 )); then
  git revert --no-edit a99ea990a1bc34f072b50f794778e93595bcda8f
fi
git apply ${SCRIPT_DIR}/patches/2147.diff
cd VTK
git config user.name "Bob T. Builder"
git config user.email "builder@ornl.gov"
git apply ${SCRIPT_DIR}/patches/2527.diff
git apply ${SCRIPT_DIR}/patches/2632.diff
git apply ${SCRIPT_DIR}/patches/2693.diff
git apply ${SCRIPT_DIR}/patches/3134.diff

# Go to build area, setup and run
cd ${BUILD_DIR}
PARAVIEW_BUILD=ParaView-${PV_VERSION3}

###############################################################################
# Check if this is a Python 3 build
###############################################################################
if [[ ${JOB_NAME} == *python3* ]]; then
    PY3=true
    PARAVIEW_BUILD="${PARAVIEW_BUILD}-python3"
fi

if [[ "$CLEAN" == true ]]; then
  echo "Clean build requested. Removing '$PARAVIEW_BUILD'"
  rm -rf $PARAVIEW_BUILD
fi
[[ -d ${PARAVIEW_BUILD} ]] || mkdir ${PARAVIEW_BUILD}
cd ${PARAVIEW_BUILD}

COMMON_CACHE_FILE=${SCRIPT_DIR}/common.cmake
OSX_CACHE_FILE=${SCRIPT_DIR}/osx.cmake
if [[ "${PY3}" == true ]]; then
  OSX_PYTHON_CACHE_FILE=${SCRIPT_DIR}/osxpython3.cmake
else
  OSX_PYTHON_CACHE_FILE=${SCRIPT_DIR}/osxpython.cmake
fi
LINUX_CACHE_FILE=${SCRIPT_DIR}/linux.cmake
PYTHON3_CACHE_FILE=${SCRIPT_DIR}/python3.cmake

[[ -d vtkMDHWSignalArray ]] || mkdir vtkMDHWSignalArray
cp ${SCRIPT_DIR}/vtkMDHWSignalArray/vtkMDHWSignalArray.h vtkMDHWSignalArray
# from the command line use SIGNAL_NAME=vtkArrayDispatch_extra_arrays=vtkMDHWSignalArray\<double\>
SIGNAL_NAME=vtkArrayDispatch_extra_arrays=vtkMDHWSignalArray\\\<double\\\>
SIGNAL_HEADER=vtkArrayDispatch_extra_headers=${BUILD_DIR}/${PARAVIEW_BUILD}/vtkMDHWSignalArray/vtkMDHWSignalArray.h

# wrap cmake call with appropriate devtoolset
if [[ ${NODE_LABELS} == *rhel6* ]]; then
  SCL_ON_RHEL="scl enable mantidlibs34 devtoolset-2"
else
  SCL_ON_RHEL="eval"
fi

# determine the cmake generator
if [ "$(command -v ninja)" ]; then
  CMAKE_GENERATOR="-G Ninja"
elif [ "$(command -v ninja-build)" ]; then
  CMAKE_GENERATOR="-G Ninja"
fi
if [ -e $BUILD_DIR/CMakeCache.txt ]; then
  CMAKE_GENERATOR=""
fi

# configure
if [[ "$ON_OSX" == true ]]; then
  if [[ "$PY3" == true ]]; then
    $SCL_ON_RHEL "${CMAKE_EXE} ${CMAKE_GENERATOR} -D${SIGNAL_NAME} -D${SIGNAL_HEADER} -C${COMMON_CACHE_FILE} -C${OSX_CACHE_FILE} -C${OSX_PYTHON_CACHE_FILE} -C${PYTHON3_CACHE_FILE} ${SRC_DIR}/${PARAVIEW_SRC}"
  else
    if [[ "$OSX_MINOR_VERSON" -gt "10" ]]; then
      $SCL_ON_RHEL "${CMAKE_EXE} ${CMAKE_GENERATOR} -D${SIGNAL_NAME} -D${SIGNAL_HEADER} -C${COMMON_CACHE_FILE} -C${OSX_CACHE_FILE} -C${OSX_PYTHON_CACHE_FILE} ${SRC_DIR}/${PARAVIEW_SRC}"
    else
      $SCL_ON_RHEL "${CMAKE_EXE} ${CMAKE_GENERATOR} -D${SIGNAL_NAME} -D${SIGNAL_HEADER} -C${COMMON_CACHE_FILE} -C${OSX_CACHE_FILE} ${SRC_DIR}/${PARAVIEW_SRC}"
    fi
  fi
else # on linux
    if [[ "${PY3}" == true ]]; then
	$SCL_ON_RHEL "${CMAKE_EXE} ${CMAKE_GENERATOR} -D${SIGNAL_NAME} -D${SIGNAL_HEADER} -C${COMMON_CACHE_FILE} -C${LINUX_CACHE_FILE} -C${PYTHON3_CACHE_FILE} ${SRC_DIR}/${PARAVIEW_SRC}"
    else
	$SCL_ON_RHEL "${CMAKE_EXE} ${CMAKE_GENERATOR} -D${SIGNAL_NAME} -D${SIGNAL_HEADER} -C${COMMON_CACHE_FILE} -C${LINUX_CACHE_FILE} ${SRC_DIR}/${PARAVIEW_SRC}"
    fi
fi

# build
${CMAKE_EXE} --build . -- -j ${BUILD_THREADS:?}
